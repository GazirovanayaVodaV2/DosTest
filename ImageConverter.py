import os

from PIL import Image

from sys import argv

palette = [
		#colors 0-15
		[0x00, 0x00, 0x00],

		[0x00, 0x00, 0xAA],
		[0x00, 0xAA, 0x00],
		[0x00, 0xAA, 0xAA],
		[0xAA, 0x00, 0x00],
		[0xAA, 0x00, 0xAA],

		[0xAA, 0x55, 0x00],
		[0xAA, 0xAA, 0xAA],
		[0x55, 0x55, 0x55],
		[0x55, 0x55, 0xFF],
		[0x55, 0xFF, 0x55],

		[0x55, 0xFF, 0xFF],
		[0xFF, 0x55, 0x55],
		[0xFF, 0x55, 0xFF],
		[0xFF, 0xFF, 0x55],
		[0xFF, 0xFF, 0xFF],

		#/* grayscale 16-31 (non gamma corrected  */
		[0x00, 0x00, 0x00],
		[0x14, 0x14, 0x14],
		[0x20, 0x20, 0x20],
		[0x2C, 0x2C, 0x2C],
		[0x38, 0x38, 0x38],

		[0x45, 0x45, 0x45],
		[0x51, 0x51, 0x51],
		[0x61, 0x61, 0x61],
		[0x71, 0x71, 0x71],
		[0x82, 0x82, 0x82],

		[0x92, 0x92, 0x92],
		[0xA2, 0xA2, 0xA2],
		[0xB6, 0xB6, 0xB6],
		[0xCB, 0xCB, 0xCB],
		[0xE3, 0xE3, 0xE3],

		[0xFF, 0xFF, 0xFF],
		#// HERE ------> 1
		#/* hue mix 32-55 (1  */
		[0x00, 0x00, 0xFF],
		[0x41, 0x00, 0xFF],
		[0x7D, 0x00, 0xFF],
		[0xBE, 0x00, 0xFF],

		[0xFF, 0x00, 0xFF],
		[0xFF, 0x00, 0xBE],
		[0xFF, 0x00, 0x7D],
		[0xFF, 0x00, 0x41],
		[0xFF, 0x00, 0x00],

		[0xFF, 0x41, 0x00],
		[0xFF, 0x7D, 0x00],
		[0xFF, 0xBE, 0x00],
		[0xFF, 0xFF, 0x00],
		[0xBE, 0xFF, 0x00],

		[0x7D, 0xFF, 0x00],
		[0x41, 0xFF, 0x00],
		[0x00, 0xFF, 0x00],
		[0x00, 0xFF, 0x41],
		[0x00, 0xFF, 0x7D],

		[0x00, 0xFF, 0xBE],
		[0x00, 0xFF, 0xFF],
		[0x00, 0xBE, 0xFF],
		[0x00, 0x7D, 0xFF],
		[0x00, 0x41, 0xFF],

		#/* hue mix 56-79 (2  */
		[0x7D, 0x7D, 0xFF],
		[0x9E, 0x7D, 0xFF],
		[0xBE, 0x7D, 0xFF],
		[0xDF, 0x7D, 0xFF],
		[0xFF, 0x7D, 0xFF],

		[0xFF, 0x7D, 0xDF],
		[0xFF, 0x7D, 0xBE],
		[0xFF, 0x7D, 0x9E],
		[0xFF, 0x7D, 0x7D],
		[0xFF, 0x9E, 0x7D],

		[0xFF, 0xBE, 0x7D],
		[0xFF, 0xDF, 0x7D],
		[0xFF, 0xFF, 0x7D],
		[0xDF, 0xFF, 0x7D],
		[0xBE, 0xFF, 0x7D],

		[0x9E, 0xFF, 0x7D],
		[0x7D, 0xFF, 0x7D],
		[0x7D, 0xFF, 0x9E],
		[0x7D, 0xFF, 0xBE],
		[0x7D, 0xFF, 0xDF],

		[0x7D, 0xFF, 0xFF],
		[0x7D, 0xDF, 0xFF],
		[0x7D, 0xBE, 0xFF],
		[0x7D, 0x9E, 0xFF],
		#/* hue mix 80-103 (3  */
		[0xB6, 0xB6, 0xFF],

		[0xC7, 0xB6, 0xFF],
		[0xDB, 0xB6, 0xFF],
		[0xEB, 0xB6, 0xFF],
		[0xFF, 0xB6, 0xFF],
		[0xFF, 0xB6, 0xEB],

		[0xFF, 0xB6, 0xDB],
		[0xFF, 0xB6, 0xC7],
		[0xFF, 0xB6, 0xB6],
		[0xFF, 0xC7, 0xB6],
		[0xFF, 0xDB, 0xB6],

		[0xFF, 0xEB, 0xB6],
		[0xFF, 0xFF, 0xB6],
		[0xEB, 0xFF, 0xB6],
		[0xDB, 0xFF, 0xB6],
		[0xC7, 0xFF, 0xB6],

		[0xB6, 0xFF, 0xB6],
		[0xB6, 0xFF, 0xC7],
		[0xB6, 0xFF, 0xDB],
		[0xB6, 0xFF, 0xEB],
		[0xB6, 0xFF, 0xFF],

		[0xB6, 0xEB, 0xFF],
		[0xB6, 0xDB, 0xFF],
		[0xB6, 0xC7, 0xFF],
		#// HERE ------> 2
		#/* hue mix 104-127 (4  dark 1 */
		[0x00, 0x00, 0x71],
		[0x1C, 0x00, 0x71],
		[0x38, 0x00, 0x71],
		[0x55, 0x00, 0x71],

		[0x71, 0x00, 0x71],
		[0x71, 0x00, 0x55],
		[0x71, 0x00, 0x38],
		[0x71, 0x00, 0x1C],
		[0x71, 0x00, 0x00],

		[0x71, 0x1C, 0x00],
		[0x71, 0x38, 0x00],
		[0x71, 0x55, 0x00],
		[0x71, 0x71, 0x00],
		[0x55, 0x71, 0x00],

		[0x38, 0x71, 0x00],
		[0x1C, 0x71, 0x00],
		[0x00, 0x71, 0x00],
		[0x00, 0x71, 0x1C],
		[0x00, 0x71, 0x38],

		[0x00, 0x71, 0x55],
		[0x00, 0x71, 0x71],
		[0x00, 0x55, 0x71],
		[0x00, 0x38, 0x71],
		[0x00, 0x1C, 0x71],

		#/* hue mix 56-79 (2  */
		[0x38, 0x38, 0x71],
		[0x45, 0x38, 0x71],
		[0x55, 0x38, 0x71],
		[0x61, 0x38, 0x71],
		[0x71, 0x38, 0x71],

		[0x71, 0x38, 0x61],
		[0x71, 0x38, 0x55],
		[0x71, 0x38, 0x45],
		[0x71, 0x38, 0x38],
		[0x71, 0x45, 0x38],

		[0x71, 0x55, 0x38],
		[0x71, 0x61, 0x38],
		[0x71, 0x71, 0x38],
		[0x61, 0x71, 0x38],
		[0x55, 0x71, 0x38],

		[0x45, 0x71, 0x38],
		[0x38, 0x71, 0x38],
		[0x38, 0x71, 0x45],
		[0x38, 0x71, 0x55],
		[0x38, 0x71, 0x61],

		[0x38, 0x71, 0x71],
		[0x38, 0x61, 0x71],
		[0x38, 0x55, 0x71],
		[0x38, 0x45, 0x71],
		#/* hue mix 80-103 (3  */
		[0x51, 0x51, 0x71],

		[0x59, 0x51, 0x71],
		[0x61, 0x51, 0x71],
		[0x69, 0x51, 0x71],
		[0x71, 0x51, 0x71],
		[0x71, 0x51, 0x69],

		[0x71, 0x51, 0x61],
		[0x71, 0x51, 0x59],
		[0x71, 0x51, 0x51],
		[0x71, 0x59, 0x51],
		[0x71, 0x61, 0x51],

		[0x71, 0x69, 0x51],
		[0x71, 0x71, 0x51],
		[0x69, 0x71, 0x51],
		[0x61, 0x71, 0x51],
		[0x59, 0x71, 0x51],

		[0x51, 0x71, 0x51],
		[0x51, 0x71, 0x59],
		[0x51, 0x71, 0x61],
		[0x51, 0x71, 0x69],
		[0x51, 0x71, 0x71],

		[0x51, 0x69, 0x71],
		[0x51, 0x61, 0x71],
		[0x51, 0x59, 0x71],
		#// HERE ------> 3
		#/* hue mix 104-127 (4  dark 1 */
		[0x00, 0x00, 0x41],
		[0x10, 0x00, 0x41],
		[0x20, 0x00, 0x41],
		[0x30, 0x00, 0x41],

		[0x41, 0x00, 0x41],
		[0x41, 0x00, 0x30],
		[0x41, 0x00, 0x20],
		[0x41, 0x00, 0x10],
		[0x41, 0x00, 0x00],

		[0x41, 0x10, 0x00],
		[0x41, 0x20, 0x00],
		[0x41, 0x30, 0x00],
		[0x41, 0x41, 0x00],
		[0x30, 0x41, 0x00],

		[0x20, 0x41, 0x00],
		[0x10, 0x41, 0x00],
		[0x00, 0x41, 0x00],
		[0x00, 0x41, 0x10],
		[0x00, 0x41, 0x20],

		[0x00, 0x41, 0x30],
		[0x00, 0x41, 0x41],
		[0x00, 0x30, 0x41],
		[0x00, 0x20, 0x41],
		[0x00, 0x10, 0x41],

		#/* hue mix 56-79 (2  */
		[0x20, 0x20, 0x41],
		[0x28, 0x20, 0x41],
		[0x30, 0x20, 0x41],
		[0x3C, 0x20, 0x41],
		[0x41, 0x20, 0x41],

		[0x41, 0x20, 0x3C],
		[0x41, 0x20, 0x30],
		[0x41, 0x20, 0x28],
		[0x41, 0x20, 0x20],
		[0x41, 0x28, 0x20],

		[0x41, 0x30, 0x20],
		[0x41, 0x3C, 0x20],
		[0x41, 0x41, 0x20],
		[0x3C, 0x41, 0x20],
		[0x30, 0x41, 0x20],

		[0x28, 0x41, 0x20],
		[0x20, 0x41, 0x20],
		[0x20, 0x41, 0x28],
		[0x20, 0x41, 0x30],
		[0x20, 0x41, 0x3C],

		[0x20, 0x41, 0x41],
		[0x20, 0x3C, 0x41],
		[0x20, 0x30, 0x41],
		[0x20, 0x28, 0x41],
		#/* hue mix 80-103 (3  */
		[0x2C, 0x2C, 0x41],

		[0x30, 0x2C, 0x41],
		[0x34, 0x2C, 0x41],
		[0x3C, 0x2C, 0x41],
		[0x41, 0x2C, 0x41],
		[0x41, 0x2C, 0x3C],

		[0x41, 0x2C, 0x34],
		[0x41, 0x2C, 0x30],
		[0x41, 0x2C, 0x2C],
		[0x41, 0x30, 0x2C],
		[0x41, 0x34, 0x2C],

		[0x41, 0x3C, 0x2C],
		[0x41, 0x41, 0x2C],
		[0x3C, 0x41, 0x2C],
		[0x34, 0x41, 0x2C],
		[0x30, 0x41, 0x2C],

		[0x2C, 0x41, 0x2C],
		[0x2C, 0x41, 0x30],
		[0x2C, 0x41, 0x34],
		[0x2C, 0x41, 0x3C],
		[0x2C, 0x41, 0x41],

		[0x2C, 0x3C, 0x41],
		[0x2C, 0x34, 0x41],
		[0x2C, 0x30, 0x41],

		#/* all black */
		[0, 0, 0],
		[0, 0, 0],
		[0, 0, 0],
		[0, 0, 0],

		[0, 0, 0],
		[0, 0, 0],
		[0, 0, 0],
		[0, 0, 0]
	]

def rgb_to_hex(r, g, b):
	"""Convert RGB color to hexadecimal."""
	return "#{:02x}{:02x}{:02x}".format(r, g, b)

def resize_to_height_200(img):
	w, h = img.size
	ratio = w / h
	new_size = (int(round(200*ratio)), 200)

	return img.resize(new_size)

def rgb_to_vga256(r,g,b):
	sqr_closest = 99999999
	index = 0

	for i in range(0,248):
		sample = palette[i]
		rs = sample[0]
		gs = sample[1]
		bs = sample[2]

		sqr_dst = (rs-r)*(rs-r) + (gs-g)*(gs-g) + (bs-b)*(bs-b)

		if (sqr_closest > sqr_dst):
			sqr_closest = sqr_dst
			index = i

	return index

def get_pixel_colors_vga(img):

	img = img.convert('RGB')
	
	width, height = img.size
	pixel_colors_hex = []

	if (width > 255) or (height > 255):
		img = resize_to_height_200(img)
		width, height = img.size

	pixel_colors_hex.append(width)
	pixel_colors_hex.append(height)
	for y in range(height):
		for x in range(width):
			r, g, b = img.getpixel((x, y))

			vga_color = rgb_to_vga256(r,g,b)
			pixel_colors_hex.append(vga_color)
				
	return pixel_colors_hex

def get_bits(img):
	width, height = img.size
	res = []
	bit_counter = 0
	byte = 0

	if (width > 255) or (height > 255):
		img = resize_to_height_200(img)
		width, height = img.size
		
	for y in range(height):
		for x in range(width):
			clr = img.getpixel((x,y))
			bit = (clr[0] or clr[1] or clr[2]) > 0
			if (byte == 0):
				byte = bit
			else:
				byte = (byte << 1) | bit
			bit_counter+=1

			if (bit_counter == 8):
				bit_counter = 0
				res.append(byte)
				byte = 0

	return res


options = {
	'output_name':'original',
	'output_format':'vga',
	'output_size':'original',
	'all_files_in_dir':False
}

ignore_formats = ['bit', 'vga']

def read_args(_args):
	args = _args[1:]
	for i in range(len(args)):
		arg = args[i]
		if arg[0] == '-':
			c = arg[1]
			match c:
				case "b":
					options['output_format'] = 'bit'
				case "o":
					options['output_name'] = args[i+1]
				case "s":
					size = arg[3:].split(':')
					size = (int(size[0]), int(size[1]))
					options['output_size'] = size
				case "a":
					options['all_files_in_dir'] = True


def gen_file(path, dir = ''):
	out_name=''
	img_format = path[path.find('.')+1:]
	if img_format in ignore_formats:
		print(f'Ignoring file: {path}')
		return

	if(options['output_name'] == 'original'):

		if path[:2] != '.\\':
			out_name = path.split('/')[-1].split('.')[0]
		else:
			out_name = path[2:].split('/')[-1].split('.')[0]

	_path = path
	if dir != '':
		_path = dir + '/' + path 
		out_name = 'assets' + '/' + out_name[:8]
	img = Image.open(_path)
	res = []

	if (options['output_size'] != 'original'):
		img = img.resize(options['output_size'])

	file_format = options['output_format']


	if options['all_files_in_dir']:
		match img_format:
			case 'png':
				file_format = 'vga'
			case 'jpg':
				file_format = 'vga'
			case 'bmp':
				file_format = 'bit'

	out_name += '.' + file_format

	match file_format:
		case 'vga':
			res = get_pixel_colors_vga(img)
		case 'bit':
			res = get_bits(img)
	
	file = open(out_name, 'wb')
	file.write(bytes(res))
	file.close()
					 
"""
Args
default: rgb2vga
-b: rgb2bitmap

-o output_name

-s=w:h - scale original image

"""
path = argv[1]
if (path):
	read_args(argv)

	files = []

	if options['all_files_in_dir']:
		if (path.find(".") > 0):
			raise "Its not dir, its a file"
		files = os.listdir(path)

		for file in files:
			gen_file(file, path)
	else:
		gen_file(path)
